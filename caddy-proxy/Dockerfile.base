FROM ubuntu:20.04
MAINTAINER proneer <phillip@proneer.co>

######## Caddy ###########

### Image and project labels
LABEL \
    maintainer="proneer <phillip@proneer.co>" \
        org.label-schema.docker.dockerfile="/Dockerfile.base" \
        org.label-schema.name="Ubuntu 20.04 Caddy Proxy Base image" \
        org.label-schema.url="https://www.proneer.co"

### Technical Environment Variables
ENV \
    USER_GID=0 \
    DEBIAN_FRONTEND=noninteractive \
    BUILD_PATH="/build" \
    SCRIPTS_PATH="/scripts" \
    APPS_PATH="/apps"

### Copy layer cleanup script
COPY scripts/clean-layer.sh  /usr/bin/clean-layer.sh
COPY scripts/fix-permissions.sh  /usr/bin/fix-permissions.sh

### Make clean-layer and fix-permissions executable
RUN \
    chmod a+rwx /usr/bin/clean-layer.sh && \
    chmod a+rwx /usr/bin/fix-permissions.sh

### Create a resource build, apps and scripts directories
RUN mkdir $BUILD_PATH && chmod a+rwx $BUILD_PATH \
    && mkdir $APPS_PATH && chmod a+rwx $APPS_PATH \
    && mkdir $SCRIPTS_PATH && chmod a+rwx $SCRIPTS_PATH

### Install runtime utilities
RUN apt-get update && apt-get install -y --no-install-recommends \
    apt-utils \
    software-properties-common \
    python3.8 \
    python3-pip \
    supervisor \
    # Fix permissions
    && fix-permissions.sh $HOME \
    # Cleanup
    && clean-layer.sh

### Install basic utilities
RUN apt-get update && apt-get install -y --no-install-recommends \
    bzip2 \
    g++ \
    git \
    graphviz \
    libgl1-mesa-glx \
    libhdf5-dev \
    wget \
    sudo \
    curl \
    nano \
    # Fix permissions
    && fix-permissions.sh $HOME \
    # Cleanup
    && clean-layer.sh \
    && rm -rf /var/lib/apt/lists/*

## tzdata Dependencies
ARG DEBIAN_FRONTEND=noninteractive
ENV TZ="Etc/UTC"
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

### Install extra packages
RUN apt-get update && apt-get install -y \
    htop \
    screen \
    tmux \
    emacs \
    vim \
	zip \
	unzip \
    make \
    cmake \
    build-essential \
    netcat \
    locales \
    tzdata \
    ca-certificates \
    jq \
    less \
    # Fix permissions
    && fix-permissions.sh $HOME \
    # Cleanup
    && clean-layer.sh

### Install additional packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    tuptime \
    nmap \
    dnsutils \
    iputils-tracepath \
    rename \
    whereami \
    tmate \
    tmux \
    zsh \
    ncdu \
    iftop \
    iotop \
    net-tools \
    sysstat \
    tuptime \
    # Fix permissions
    && fix-permissions.sh $HOME \
    # Cleanup
    && clean-layer.sh \
    && rm -rf /var/lib/apt/lists/*

### Install Docker SDK
RUN echo "**** installing docker sdk ****" \
    && pip3 install \
        docker \
        coloredlogs

### Install Golang dev environment
RUN \
    echo "**** installing golang dev environment ****" \
    && mkdir $RESOURCES_PATH"/golang" \
    && cd $RESOURCES_PATH"/golang" \
    && GO_VERSION=$(curl -sX GET https://go.dev/dl/ | grep -o '<span.*>.*linux-amd64.*</span>' | grep -oP '(?<=go).*(?=.linux)') \
    && wget --quiet https://dl.google.com/go/go$GO_VERSION.linux-amd64.tar.gz -O ~/go.tgz \
    && tar -C /usr/local -xzf ~/go.tgz \
    && rm ~/go.tgz \
    && echo "export PATH="/usr/local/go/bin:$PATH"" >> ~/.bashrc

RUN rm -rf $BUILD_PATH"/golang" \
    # Fix permissions \
    && fix-permissions.sh $HOME \
    # Cleanup
    && clean-layer.sh

ENV GOPATH /go
ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH
RUN mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"

WORKDIR $BUILD_PATH